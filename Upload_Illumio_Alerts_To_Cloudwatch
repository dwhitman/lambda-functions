from botocore.vendored import requests
import datetime
import boto3
import time
import os

def lambda_handler(event, context): 
	login = os.environ['login']
	password = os.environ['password']
	base_url = 'https://scp1.illum.io/api/v2'
	blocked_url = '/orgs/8/blocked_traffic'
	seconds_back = 900
	now = datetime.datetime.utcnow()

	cloudwatch_logs = boto3.client('logs')
	cloudwatch_log_group = 'illumio-logs'
	cloudwatch_log_stream = 'illumio-stream'
	
	blocked_requests = requests.get(base_url+blocked_url, auth=(login, password))

	if blocked_requests.status_code == int(200):
		for each in blocked_requests.json():
			
			last_occurred_time = datetime.datetime.strptime((each['last_occurred_at']), "%Y-%m-%dT%H:%M:%S.000+00:00")
			difference = now - last_occurred_time
			d = difference.seconds
			
			if d < seconds_back:
				#Get the workload from the blocked requests json so we can query workload
				workload = each['destination']['workloads'][0]['href']
				workload_request = requests.get(base_url+workload, auth=(login, password))
	
				if workload_request.status_code == int(200):
					data_center = (workload_request.json()['data_center'])
	
				source =(each['source']['ip_address'])
				destination = (each['destination']['ip_address'])
				port = (each['port'])
				service = (each['service_name'])
				flow_status = (each['flow_status'])
				last_occurred = (each['last_occurred_at'])
				blocked_event_url = (each['href']).split('/', 4)
				cloudwatch_message = ("AWS location: " + data_center + ", Source: " + source + ", Destination: " + destination + ", Service: " + service + ", Port: " + str(port) + ", Status: " + flow_status + ", Troubleshooting URL: https://scp1.illum.io/#/blockedtraffic/" + blocked_event_url[4] )
			
				pattern = '%Y-%m-%dT%H:%M:%S.000+00:00'
				timestamp = int(time.mktime(time.strptime(str(each['last_occurred_at']), pattern)) * 1000)
			
				logstream = cloudwatch_logs.describe_log_streams(
					logGroupName=cloudwatch_log_group,
					logStreamNamePrefix=cloudwatch_log_stream
				)
	
				if "uploadSequenceToken" in logstream['logStreams'][0]:
					nextSequenceToken = (logstream['logStreams'][0]['uploadSequenceToken'])
				else:
					nextSequenceToken = "0"
	
				response = cloudwatch_logs.put_log_events (
					logGroupName=cloudwatch_log_group,
					logStreamName=cloudwatch_log_stream,
					logEvents=[
						{
							'timestamp': timestamp,
							'message': cloudwatch_message
						}
					],
					sequenceToken = nextSequenceToken
	
				)
			
